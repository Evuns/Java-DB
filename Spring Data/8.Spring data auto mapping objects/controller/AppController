package com.example.automapping.controller;

import com.example.automapping.dtos.GameAddDto;
import com.example.automapping.dtos.LoginDto;
import com.example.automapping.dtos.RegisterDto;
import com.example.automapping.services.GameService;
import com.example.automapping.services.UserService;
import com.example.automapping.utils.ValidationUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import javax.validation.ConstraintViolation;
import java.io.BufferedReader;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;


@Component
public class AppController implements CommandLineRunner {

    private final BufferedReader bufferedReader;
    private final ValidationUtil validationUtil;
    private final UserService userService;
    private final GameService gameService;


    @Autowired
    public AppController(BufferedReader bufferedReader, ValidationUtil validationUtil,
                         UserService userService, GameService gameService) {
        this.bufferedReader = bufferedReader;
        this.validationUtil = validationUtil;
        this.userService = userService;
        this.gameService = gameService;
    }


    @Override
    public void run(String... args) throws Exception {

        while (true) {
            System.out.println("Choose what you want to do and provide necessary information:");
            String[] input = this.bufferedReader.readLine().split("\\|");
            switch (input[0]) {
                case "RegisterUser":
                    if (!input[2].equals(input[3])) {
                        System.out.println("Passwords don`t mach");
                        break;
                    }

                    RegisterDto userRegister = new RegisterDto(input[1], input[2], input[4]);
                    if (this.validationUtil.isValid(userRegister)) {
                        this.userService.register(userRegister);
                    } else {
                        this.validationUtil.getViolation(userRegister).stream()
                                .map(ConstraintViolation::getMessage)
                                .forEach(System.out::println);
                    }
                    break;
                case "LoginUser":
                    LoginDto loginDto = new LoginDto(input[1], input[2]);
                    this.userService.login(loginDto);
                    break;
                case "Logout":
                    this.userService.logout();
                    break;
                case "AddGame":
                    GameAddDto gameAddDto = new GameAddDto(input[1], Double.parseDouble(input[2]),
                            Double.parseDouble(input[3]), input[4], input[5], input[6],
                            LocalDate.parse(input[7], DateTimeFormatter.ofPattern("dd-MM-yyyy")));
                    if (this.validationUtil.isValid(gameAddDto)) {
                        this.gameService.addGame(gameAddDto);
                    } else {
                        this.validationUtil.getViolation(gameAddDto).stream()
                                .map(ConstraintViolation::getMessage).forEach(System.out::println);
                    }
                    break;
                case "EditGame":
                    this.gameService.editGame(input);
                    break;
                case "DeleteGame":
                    this.gameService.deleteGame(Integer.parseInt(input[1]));
                    break;
                case "AllGames":
                    this.gameService.printAllGames();
                    break;
                case "DetailGame":
                    this.gameService.printDetailedGame(input[1]);
                case "OwnedGames":
                    this.userService.getUserGames();
            }

        }


    }
}

